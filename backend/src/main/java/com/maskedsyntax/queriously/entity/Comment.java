package com.maskedsyntax.queriously.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Data;

/**
 * Represents a Comment entity in the system, allowing for nested comments (threaded structure).
 * 
 * This entity is used to store comments related to answers. Each comment can be a top-level comment 
 * (associated directly with an answer) or a nested reply to another comment. Nested comments are 
 * supported through a self-referencing relationship.
 * 
 * Key Features:
 * - Supports unlimited nested replies (threaded comments).
 * - Linked to a specific answer and user.
 * - Tracks creation and update timestamps.
 */
@Entity
@Data
@Table(name = "comments")
public class Comment {
    
    /**
     * Unique identifier for the comment.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The answer to which this comment belongs.
     * This represents a many-to-one relationship, as multiple comments can be associated with a single answer.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "answer_id", nullable = false)
    private Answer answer;

    /**
     * The parent comment to which this comment is a reply (if any).
     * This self-referencing relationship allows for nested comments (threads).
     * Top-level comments will have this field set to null.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_comment_id", nullable = true)
    private Comment parentComment; // Self-referencing for nested comments

    /**
     * List of replies to this comment.
     * Represents a one-to-many relationship where each comment can have multiple replies (child comments).
     * Replies are automatically cascaded and removed when the parent comment is deleted.
     */
    @OneToMany(mappedBy = "parentComment", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Comment> replies = new ArrayList<>();

    /**
     * The user who created this comment.
     * This represents a many-to-one relationship, as each comment is associated with one user.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /**
     * The textual content of the comment.
     */
    private String content;

    /**
     * Timestamp indicating when the comment was created.
     * Automatically managed by Hibernate.
     */
    @CreationTimestamp
    private Date createdAt;

    /**
     * Timestamp indicating when the comment was last updated.
     * Automatically managed by Hibernate.
     */
    @UpdateTimestamp
    private Date updatedAt;

}
